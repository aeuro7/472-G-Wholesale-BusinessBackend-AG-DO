name: Golang CI/CD Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Install dependencies
      run: go mod download
      
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        
    - name: Run tests
      run: go test -v ./...

  build-develop:
    name: Build Docker image (develop)
    needs: test
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: myapp:develop
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-and-push-main:
    name: Build and Push Docker image (main)
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Generate tag
      id: tag
      run: |
        echo "TAG=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
        echo "VERSION=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/golang-app:latest
          ${{ secrets.DOCKER_USERNAME }}/golang-app:${{ steps.tag.outputs.TAG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.tag.outputs.VERSION }}
        name: Release v${{ steps.tag.outputs.VERSION }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
